<!--
//=============================================================================
// DlgError
// エラーダイアログ表示
//
// Copyright (C) SKYCOM Corporation
// EandM
//=============================================================================
-->

@using SKYCOM.DLManagement.Data
@using System.Threading
@inject Message _message

<div>
    <div class="modal @modalClass" tabindex="-1" role="dialog" style="display:@modalDisplay">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@_message.MessageList["ErrorMessageTitle"]</h5>
                </div>
                <div class="modal-body">
                    <p><span style="white-space: pre-line">@message</span></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">@_message.MessageList["Close"]</button>
                </div>
            </div>
        </div>
    </div>
</div>


@if (IsShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}


@code {
    private string message { get; set; }
    private string modalDisplay = "none;";
    private string modalClass = "";
    public bool IsShowBackdrop = false;

    /// <summary>
    /// エラーダイアログを表示する
    /// </summary>
    /// <param name="displayMessage"></param>
    public async void Open(string displayMessage)
    {
        this.message = displayMessage;
        modalDisplay = "block;";
        modalClass = "Show";
        IsShowBackdrop = true;
        if (Thread.CurrentThread.IsBackground)
        {
            await InvokeAsync(() => StateHasChanged());
        }
        else
        {
            StateHasChanged();
        }
    }

    /// <summary>
    /// 閉じるボタン押下処理
    /// </summary>
    async void Close()
    {
        modalDisplay = "none";
        modalClass = "";
        IsShowBackdrop = false;
        if (Thread.CurrentThread.IsBackground)
        {
            await InvokeAsync(() => StateHasChanged());
        }
        else
        {
            StateHasChanged();
        }
    }
}
